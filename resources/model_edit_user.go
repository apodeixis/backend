/*
Apodeixis backend

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package resources

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the EditUser type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EditUser{}

// EditUser struct for EditUser
type EditUser struct {
	Type       string                  `json:"type"`
	Attributes EditUserAllOfAttributes `json:"attributes"`
}

type _EditUser EditUser

// NewEditUser instantiates a new EditUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEditUser(type_ string, attributes EditUserAllOfAttributes) *EditUser {
	this := EditUser{}
	this.Type = type_
	this.Attributes = attributes
	return &this
}

// NewEditUserWithDefaults instantiates a new EditUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEditUserWithDefaults() *EditUser {
	this := EditUser{}
	return &this
}

// GetType returns the Type field value
func (o *EditUser) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *EditUser) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *EditUser) SetType(v string) {
	o.Type = v
}

// GetAttributes returns the Attributes field value
func (o *EditUser) GetAttributes() EditUserAllOfAttributes {
	if o == nil {
		var ret EditUserAllOfAttributes
		return ret
	}

	return o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value
// and a boolean to check if the value has been set.
func (o *EditUser) GetAttributesOk() (*EditUserAllOfAttributes, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Attributes, true
}

// SetAttributes sets field value
func (o *EditUser) SetAttributes(v EditUserAllOfAttributes) {
	o.Attributes = v
}

func (o EditUser) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EditUser) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["attributes"] = o.Attributes
	return toSerialize, nil
}

func (o *EditUser) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"attributes",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEditUser := _EditUser{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEditUser)

	if err != nil {
		return err
	}

	*o = EditUser(varEditUser)

	return err
}

type NullableEditUser struct {
	value *EditUser
	isSet bool
}

func (v NullableEditUser) Get() *EditUser {
	return v.value
}

func (v *NullableEditUser) Set(val *EditUser) {
	v.value = val
	v.isSet = true
}

func (v NullableEditUser) IsSet() bool {
	return v.isSet
}

func (v *NullableEditUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEditUser(val *EditUser) *NullableEditUser {
	return &NullableEditUser{value: val, isSet: true}
}

func (v NullableEditUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEditUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
