/*
Apodeixis backend

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package resources

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the PostHeader type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PostHeader{}

// PostHeader struct for PostHeader
type PostHeader struct {
	Id            string                    `json:"id"`
	Type          string                    `json:"type"`
	Attributes    PostHeaderAllOfAttributes `json:"attributes"`
	Relationships *PostAllOfRelationships   `json:"relationships,omitempty"`
}

type _PostHeader PostHeader

// NewPostHeader instantiates a new PostHeader object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPostHeader(id string, type_ string, attributes PostHeaderAllOfAttributes) *PostHeader {
	this := PostHeader{}
	this.Id = id
	this.Type = type_
	this.Attributes = attributes
	return &this
}

// NewPostHeaderWithDefaults instantiates a new PostHeader object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPostHeaderWithDefaults() *PostHeader {
	this := PostHeader{}
	return &this
}

// GetId returns the Id field value
func (o *PostHeader) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *PostHeader) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *PostHeader) SetId(v string) {
	o.Id = v
}

// GetType returns the Type field value
func (o *PostHeader) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *PostHeader) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *PostHeader) SetType(v string) {
	o.Type = v
}

// GetAttributes returns the Attributes field value
func (o *PostHeader) GetAttributes() PostHeaderAllOfAttributes {
	if o == nil {
		var ret PostHeaderAllOfAttributes
		return ret
	}

	return o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value
// and a boolean to check if the value has been set.
func (o *PostHeader) GetAttributesOk() (*PostHeaderAllOfAttributes, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Attributes, true
}

// SetAttributes sets field value
func (o *PostHeader) SetAttributes(v PostHeaderAllOfAttributes) {
	o.Attributes = v
}

// GetRelationships returns the Relationships field value if set, zero value otherwise.
func (o *PostHeader) GetRelationships() PostAllOfRelationships {
	if o == nil || IsNil(o.Relationships) {
		var ret PostAllOfRelationships
		return ret
	}
	return *o.Relationships
}

// GetRelationshipsOk returns a tuple with the Relationships field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostHeader) GetRelationshipsOk() (*PostAllOfRelationships, bool) {
	if o == nil || IsNil(o.Relationships) {
		return nil, false
	}
	return o.Relationships, true
}

// HasRelationships returns a boolean if a field has been set.
func (o *PostHeader) HasRelationships() bool {
	if o != nil && !IsNil(o.Relationships) {
		return true
	}

	return false
}

// SetRelationships gets a reference to the given PostAllOfRelationships and assigns it to the Relationships field.
func (o *PostHeader) SetRelationships(v PostAllOfRelationships) {
	o.Relationships = &v
}

func (o PostHeader) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PostHeader) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["type"] = o.Type
	toSerialize["attributes"] = o.Attributes
	if !IsNil(o.Relationships) {
		toSerialize["relationships"] = o.Relationships
	}
	return toSerialize, nil
}

func (o *PostHeader) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"type",
		"attributes",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPostHeader := _PostHeader{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPostHeader)

	if err != nil {
		return err
	}

	*o = PostHeader(varPostHeader)

	return err
}

type NullablePostHeader struct {
	value *PostHeader
	isSet bool
}

func (v NullablePostHeader) Get() *PostHeader {
	return v.value
}

func (v *NullablePostHeader) Set(val *PostHeader) {
	v.value = val
	v.isSet = true
}

func (v NullablePostHeader) IsSet() bool {
	return v.isSet
}

func (v *NullablePostHeader) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePostHeader(val *PostHeader) *NullablePostHeader {
	return &NullablePostHeader{value: val, isSet: true}
}

func (v NullablePostHeader) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePostHeader) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
