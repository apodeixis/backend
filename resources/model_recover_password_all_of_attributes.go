/*
Apodeixis backend

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package resources

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the RecoverPasswordAllOfAttributes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RecoverPasswordAllOfAttributes{}

// RecoverPasswordAllOfAttributes struct for RecoverPasswordAllOfAttributes
type RecoverPasswordAllOfAttributes struct {
	Token       string `json:"token"`
	NewPassword string `json:"new_password"`
}

type _RecoverPasswordAllOfAttributes RecoverPasswordAllOfAttributes

// NewRecoverPasswordAllOfAttributes instantiates a new RecoverPasswordAllOfAttributes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecoverPasswordAllOfAttributes(token string, newPassword string) *RecoverPasswordAllOfAttributes {
	this := RecoverPasswordAllOfAttributes{}
	this.Token = token
	this.NewPassword = newPassword
	return &this
}

// NewRecoverPasswordAllOfAttributesWithDefaults instantiates a new RecoverPasswordAllOfAttributes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecoverPasswordAllOfAttributesWithDefaults() *RecoverPasswordAllOfAttributes {
	this := RecoverPasswordAllOfAttributes{}
	return &this
}

// GetToken returns the Token field value
func (o *RecoverPasswordAllOfAttributes) GetToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Token
}

// GetTokenOk returns a tuple with the Token field value
// and a boolean to check if the value has been set.
func (o *RecoverPasswordAllOfAttributes) GetTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Token, true
}

// SetToken sets field value
func (o *RecoverPasswordAllOfAttributes) SetToken(v string) {
	o.Token = v
}

// GetNewPassword returns the NewPassword field value
func (o *RecoverPasswordAllOfAttributes) GetNewPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NewPassword
}

// GetNewPasswordOk returns a tuple with the NewPassword field value
// and a boolean to check if the value has been set.
func (o *RecoverPasswordAllOfAttributes) GetNewPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NewPassword, true
}

// SetNewPassword sets field value
func (o *RecoverPasswordAllOfAttributes) SetNewPassword(v string) {
	o.NewPassword = v
}

func (o RecoverPasswordAllOfAttributes) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RecoverPasswordAllOfAttributes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["token"] = o.Token
	toSerialize["new_password"] = o.NewPassword
	return toSerialize, nil
}

func (o *RecoverPasswordAllOfAttributes) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"token",
		"new_password",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRecoverPasswordAllOfAttributes := _RecoverPasswordAllOfAttributes{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRecoverPasswordAllOfAttributes)

	if err != nil {
		return err
	}

	*o = RecoverPasswordAllOfAttributes(varRecoverPasswordAllOfAttributes)

	return err
}

type NullableRecoverPasswordAllOfAttributes struct {
	value *RecoverPasswordAllOfAttributes
	isSet bool
}

func (v NullableRecoverPasswordAllOfAttributes) Get() *RecoverPasswordAllOfAttributes {
	return v.value
}

func (v *NullableRecoverPasswordAllOfAttributes) Set(val *RecoverPasswordAllOfAttributes) {
	v.value = val
	v.isSet = true
}

func (v NullableRecoverPasswordAllOfAttributes) IsSet() bool {
	return v.isSet
}

func (v *NullableRecoverPasswordAllOfAttributes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecoverPasswordAllOfAttributes(val *RecoverPasswordAllOfAttributes) *NullableRecoverPasswordAllOfAttributes {
	return &NullableRecoverPasswordAllOfAttributes{value: val, isSet: true}
}

func (v NullableRecoverPasswordAllOfAttributes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecoverPasswordAllOfAttributes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
