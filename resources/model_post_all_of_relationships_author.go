/*
Apodeixis backend

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package resources

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the PostAllOfRelationshipsAuthor type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PostAllOfRelationshipsAuthor{}

// PostAllOfRelationshipsAuthor struct for PostAllOfRelationshipsAuthor
type PostAllOfRelationshipsAuthor struct {
	Data UserKey `json:"data"`
}

type _PostAllOfRelationshipsAuthor PostAllOfRelationshipsAuthor

// NewPostAllOfRelationshipsAuthor instantiates a new PostAllOfRelationshipsAuthor object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPostAllOfRelationshipsAuthor(data UserKey) *PostAllOfRelationshipsAuthor {
	this := PostAllOfRelationshipsAuthor{}
	this.Data = data
	return &this
}

// NewPostAllOfRelationshipsAuthorWithDefaults instantiates a new PostAllOfRelationshipsAuthor object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPostAllOfRelationshipsAuthorWithDefaults() *PostAllOfRelationshipsAuthor {
	this := PostAllOfRelationshipsAuthor{}
	return &this
}

// GetData returns the Data field value
func (o *PostAllOfRelationshipsAuthor) GetData() UserKey {
	if o == nil {
		var ret UserKey
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *PostAllOfRelationshipsAuthor) GetDataOk() (*UserKey, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Data, true
}

// SetData sets field value
func (o *PostAllOfRelationshipsAuthor) SetData(v UserKey) {
	o.Data = v
}

func (o PostAllOfRelationshipsAuthor) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PostAllOfRelationshipsAuthor) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["data"] = o.Data
	return toSerialize, nil
}

func (o *PostAllOfRelationshipsAuthor) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"data",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPostAllOfRelationshipsAuthor := _PostAllOfRelationshipsAuthor{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPostAllOfRelationshipsAuthor)

	if err != nil {
		return err
	}

	*o = PostAllOfRelationshipsAuthor(varPostAllOfRelationshipsAuthor)

	return err
}

type NullablePostAllOfRelationshipsAuthor struct {
	value *PostAllOfRelationshipsAuthor
	isSet bool
}

func (v NullablePostAllOfRelationshipsAuthor) Get() *PostAllOfRelationshipsAuthor {
	return v.value
}

func (v *NullablePostAllOfRelationshipsAuthor) Set(val *PostAllOfRelationshipsAuthor) {
	v.value = val
	v.isSet = true
}

func (v NullablePostAllOfRelationshipsAuthor) IsSet() bool {
	return v.isSet
}

func (v *NullablePostAllOfRelationshipsAuthor) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePostAllOfRelationshipsAuthor(val *PostAllOfRelationshipsAuthor) *NullablePostAllOfRelationshipsAuthor {
	return &NullablePostAllOfRelationshipsAuthor{value: val, isSet: true}
}

func (v NullablePostAllOfRelationshipsAuthor) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePostAllOfRelationshipsAuthor) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
